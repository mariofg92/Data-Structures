/*! \mainpage  Priority Queue
 *
\version v0
\author  Estructuras de Datos

 * \section intro_sec Introduccion
 *
 * En esta practica se pretende avanzar en el uso de las estructuras de datos, para ello comenzaremos con un tipo de datos simplificado que llamaremos priority_queue.

Una priority_queue (cola_con_prioridad) es un contenedor que proporciona un
subconjunto restringido de métodos (inserción de elementos además del borrado y consulta del elemento “mayor”). Se garantiza que el elemento “mayor” de la priority_queue se encuentra en el tope de la misma. Priority_queue no
permite la iteración a través de sus elementos.


\section example_sec Ejemplo de Uso:
 

\code
#include "priority_queue.h"

priority_queue<int> q1;


for (i=1;i<10;i++) q1.push(i);

for (i=20;i>11;i--) q1.push(i);

while (!q1.empty())  { // Imprime los números del 20 al 1. 
     cout << q1.top() << " ";
     q1.pop();   
   }
 
\endcode

\section Representaciones

El alumno deberá realizar dos implementaciones distintas de una cola con prioridad, utilizando como base el TDA vector de la STL, en la primera de ellas los elementos se almacenarán sin tener en cuenta su valor mientras que en la segunda debemos garantizar que los elementos se encuentran ordenados en el vector

\section primera Primera Representación:

\subsection fact_sec1 Función de Abstracción :

Funcion de Abstraccion:
AF: Rep => Abs
   
  dada qq=(vector<T>  V, int mayor) ==> priority_queue PQ;
  
Un objeto abstracto, Q, se instancia en la cola con prioridad pq teniendo:

\code
 pq.V[mayor] = PQ.top()
\endcode
 
\subsection inv_sec1 Invariante de la Representación:

 
Propiedades que debe cumplir cualquier objeto 

\code
pq.size() == pq.V.size();

Para todo i, 0 <= i < pq.V.size() se cumple
pq.V[mayor] >= pq.V[i];

\endcode

\section segunda Segunda Representación:
En este caso, la representación que se utiliza es un vector ordenado de elementos 
\subsection fact_sec2 Función de Abstracción :

Funcion de Abstraccion:
AF: Rep => Abs
   
  dada qq=(vector<T>  V) ==> priority_queue PQ;
  
Un objeto abstracto, Q, se instancia en la cola con prioridad pq teniendo:

\code
 pq.V[0] = PQ.top()
\endcode
 
\subsection inv_sec2 Invariante de la Representación:


Propiedades que debe cumplir cualquier objeto 

\code
pq.size() == pq.V.size();

Para todo i, 0 <= i < pq.V.size()-1 se cumple
pq.V[i] >= pq.V[i+1];

\endcode
\section sec_tar Tareas a Realizar. 
Se pide implementar las dos representaciones del TDA priority_queue y analizar la eficiencia del siguiente código que permite ordenar un vector de elementos. 

Para ello se puede utilizar el código que se ha proporcionado en la práctica 1.

\code
// Ordena un vector de string en orden creciente 
//@param[in,out] V vector a ordenar
//
void ordenar(vector<string> & V){

 priority_queue aux;
 int pos;

 for (int i=0;i<V.size(); i++)
   aux.push(V[i]);

 pos = V.size()-1;
 while (!aux.empty()) {
   V[pos]=aux.top();
   aux.pop();
   pos--;
 }
}

\endcode


 */
