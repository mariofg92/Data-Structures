
/** Clase deque.   
deque<T> modela una deque de elementos de tipo T
Tipos:
size_type: unsigned int
iterator: iteradores sobre deque

Funcion de Abstraccion:
AF: Rep => Abs
   
  dada dq=(T * datos, int inicio, int final, size_type cuantos, size_type cuantos) ==> deque Q;
  
Un deque abstracto, Q, se instancia en el deque dq teniendo:

 dq.cuantos = Q.size();
 dq.capa = Q.capacity();
 dq.datos[inicio]==Q[0],..., dq.datos[(inicio+i)%capa] == Q[i], ..., dq.datos[final-1]==Q[Q.size()-1]



@invariant

Invariante de la Representacion:
0 <= dq.cuantos <= dq.capa;
dq.datos tiene memoria reservada de tamanio capa
0<=dq.inicio<=dq.capa-1
0<=dq.final<=dq.capa-1

**/


template<typename T>
deque<T>::deque(size_type n, const T & t  )  
// Los parámetros por defecto solo aparecen en la especificación 
{ cuantos = n;
  capa = n;
  if (n!=0) {
     datos = new T[n];
     for (size_type i = 0; i<capa; i++)
         datos[i]=t;
     }
  else datos = 0;
  inicio = 0;
  final = 0;
}

template<typename T>
deque<T>::deque( const deque<T> & org)
{
  cuantos = org.cuantos;
  capa= org.capa;
  inicio = org.inicio;
  final = org.final;
  datos = new T[capa];
  for (int i = 0; i< org.cuantos; i++)
    datos[(inicio+i)%capa] = org.datos[(inicio+i)%capa];
  
}


template<typename T>
deque<T>::~deque()
{
  delete [] datos;
}


template<typename T>
typename deque<T>::size_type deque<T>::size( ) const
{
  return cuantos;
}

template<typename T>
typename deque<T>::size_type deque<T>::capacity( ) const
{
  return capa;
}

template<typename T>
bool deque<T>::empty( ) const
{
  return (size==0);
}
template<typename T>
T &  deque<T>::operator[](size_type n) {
  return datos[(inicio+n)%capa];
}

template<typename T>
const T &  deque<T>::operator[](size_type n) const{
  return datos[(inicio+n)%capa];
} 
 
template<typename T>
 void deque<T>::push_back(const T & t)
 {
  //cheq_rep();
  if (cuantos==capa){ // Si lleno
      T * aux;
      size_type nueva_capa;
      nueva_capa= (capa==0)? 1:2*capa;
      aux = new T[nueva_capa];
      assert(aux!=0);
      for (size_type i = 0; i<cuantos; i++)
         aux[i] = datos[(inicio+i)%capa];
      delete [] datos;
      datos = aux;
      capa = nueva_capa;
      inicio = 0;
      final = cuantos;
      }
   datos[final] = t;
   final=(final+1)%capa;
   cuantos++;
 //  cheq_rep();
  
}

template<typename T>
 void deque<T>::push_front(const T & t)
 { 
  if (cuantos==capa){ // Si lleno
      T * aux;
      size_type nueva_capa;
      nueva_capa= (capa==0)? 1:2*capa;
      aux = new T[nueva_capa];
      assert(aux!=0);
      for (size_type i = 0; i<cuantos; i++)
         aux[i] = datos[(inicio+i)%capa];
      delete [] datos;
      datos = aux;
      capa = nueva_capa;
      inicio = 0;
      final = cuantos;
      }
   inicio--;
   if (inicio <0) inicio = capa-1;
   datos[inicio] = t;
   cuantos++;
   //cheq_rep();
   }

template<typename T>
void deque<T>::resize( size_type n, const T & t )
{  size_type i;
      if (n > capa)
        { T * aux;
          aux = new T[n];
      assert(aux!=0);
      for (i = 0; i<cuantos; i++)
         aux[i] = datos[(inicio+i)%capa];
      for ( ;i < n; i++)
         aux[i] = t;
      delete [] datos;
      datos = aux;
      capa = n;
      cuantos = capa;
      }
      
}

//OPERACIONES CON ITERATOR 

template<typename T>
typename deque<T>::iterator deque<T>::begin() 
{
   iterator it;
   it.el_ite = datos+inicio;
   it.el_deq = this;
   return it;
}

template<typename T>
typename deque<T>::iterator   deque<T>::end() 
{  iterator it;
   it.el_ite = datos+final;
   it.el_deq = this;
   return it;
}
                      
template<typename T>
typename deque<T>::iterator deque<T>::insert(typename deque<T>::iterator & pos, const T & t) 
{ 
  
}

template<typename T>
typename deque<T>::iterator deque<T>::erase(typename deque<T>::iterator & pos){
//off_beg numero de pasos a dar hasta alcanzar la posicion de inicio
//off_end numero de pasos a dar hasta alcanzar la posicion de final

int off_beg,off_end;
int indice=pos.el_ite - (datos+inicio);  // Indice del elemento a borrar
 
  off_beg = (pos.el_ite >=(datos+inicio))?pos.el_ite - (datos+inicio): (pos.el_ite-datos)+ (capa-inicio);
  off_end = (pos.el_ite <=(datos+final))?(datos+final)-pos.el_ite-1: (datos+capa-pos.el_ite)+final-1;

  if (off_beg <= off_end) // Hay que desplazar desde el principio
  { 
    for (int i=0; i<off_beg;i++, indice--)
      (*this)[indice] = (*this)[indice-1];
    inicio= (inicio+1)%capa;
    ++pos; // Es necesario avanzar a la posicion  siguiente al elemento borrado;
  } else // Desplazar desde el final
    { 
      for (int i=0; i<off_end;i++, indice++)
	 (*this)[indice] = (*this)[indice+1];
      final--;
      if (final <0) final = capa;
   }
  cuantos--;
  return pos;
}

//IMPLEMENTACION DEL TDA ITERATOR

template<typename T>
deque<T>::iterator::iterator()
{ el_ite=0;
  el_deq =0; }

template<typename T>
deque<T>::iterator::iterator( const typename deque<T>::iterator & it)
{
  el_ite = it.el_ite;
  el_deq = it.el_deq;
}

template<typename T>
T & deque<T>::iterator::operator*()
{
    return *el_ite;
}

template<typename T>
typename deque<T>::iterator &    deque<T>::iterator::operator++()
{
  el_ite = el_deq->datos + ((el_ite-el_deq->datos)+1)%el_deq->capa;
  return *this;
}

template<typename T>
typename deque<T>::iterator &   
  deque<T>::iterator::operator=(const typename deque<T>::iterator & it)
{
el_ite = it.el_ite;
el_deq = it.el_deq;
return *this;
                    
}

template<typename T>
bool deque<T>::iterator::operator==(const typename deque<T>::iterator & it) const
{
     return (el_ite==it.el_ite);
}
template<typename T>
bool deque<T>::iterator::operator!=(const typename deque<T>::iterator & it) const
{
     return (el_ite!=it.el_ite);
}
  
  
 
                
 
